{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[]},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/muhammadasifwazir/mlops-basic-for-beginner-session01?scriptVersionId=243058853\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# ***1. Importing Libraries***","metadata":{}},{"cell_type":"code","source":"# Joblib\nimport pandas\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression\nimport joblib","metadata":{"id":"TMc6tVN8deHc","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:25.075938Z","iopub.execute_input":"2025-06-01T12:22:25.076272Z","iopub.status.idle":"2025-06-01T12:22:26.626781Z","shell.execute_reply.started":"2025-06-01T12:22:25.076219Z","shell.execute_reply":"2025-06-01T12:22:26.625879Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# ***2. Data Loading***","metadata":{}},{"cell_type":"code","source":"url = \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\"\nnames = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\ndataframe = pandas.read_csv(url, names=names)\narray = dataframe.values\n","metadata":{"id":"OTK22gmCdi0h","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:26.628377Z","iopub.execute_input":"2025-06-01T12:22:26.628844Z","iopub.status.idle":"2025-06-01T12:22:26.827503Z","shell.execute_reply.started":"2025-06-01T12:22:26.628814Z","shell.execute_reply":"2025-06-01T12:22:26.826516Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"dataframe.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"V_uN69pN_guf","outputId":"42f75c7e-bc9a-45ef-b0c2-d2cbb722f9cf","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:26.828398Z","iopub.execute_input":"2025-06-01T12:22:26.828724Z","iopub.status.idle":"2025-06-01T12:22:26.862985Z","shell.execute_reply.started":"2025-06-01T12:22:26.828692Z","shell.execute_reply":"2025-06-01T12:22:26.862135Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   preg  plas  pres  skin  test  mass   pedi  age  class\n0     6   148    72    35     0  33.6  0.627   50      1\n1     1    85    66    29     0  26.6  0.351   31      0\n2     8   183    64     0     0  23.3  0.672   32      1\n3     1    89    66    23    94  28.1  0.167   21      0\n4     0   137    40    35   168  43.1  2.288   33      1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>preg</th>\n      <th>plas</th>\n      <th>pres</th>\n      <th>skin</th>\n      <th>test</th>\n      <th>mass</th>\n      <th>pedi</th>\n      <th>age</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6</td>\n      <td>148</td>\n      <td>72</td>\n      <td>35</td>\n      <td>0</td>\n      <td>33.6</td>\n      <td>0.627</td>\n      <td>50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>85</td>\n      <td>66</td>\n      <td>29</td>\n      <td>0</td>\n      <td>26.6</td>\n      <td>0.351</td>\n      <td>31</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8</td>\n      <td>183</td>\n      <td>64</td>\n      <td>0</td>\n      <td>0</td>\n      <td>23.3</td>\n      <td>0.672</td>\n      <td>32</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>89</td>\n      <td>66</td>\n      <td>23</td>\n      <td>94</td>\n      <td>28.1</td>\n      <td>0.167</td>\n      <td>21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>137</td>\n      <td>40</td>\n      <td>35</td>\n      <td>168</td>\n      <td>43.1</td>\n      <td>2.288</td>\n      <td>33</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"X = array[:,0:8]\nY = array[:,8]\ntest_size = 0.33\nseed = 7\n","metadata":{"id":"dUVq4E4pdlUd","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:26.864767Z","iopub.execute_input":"2025-06-01T12:22:26.865376Z","iopub.status.idle":"2025-06-01T12:22:26.870221Z","shell.execute_reply.started":"2025-06-01T12:22:26.865343Z","shell.execute_reply":"2025-06-01T12:22:26.869173Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"# ***3. Model Build***","metadata":{}},{"cell_type":"code","source":"X_train, X_test, Y_train, Y_test = model_selection.train_test_split(X, Y, test_size=test_size, random_state=seed)\n# Fit the model on training set\nmodel = LogisticRegression()\nmodel.fit(X_train, Y_train)\n","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":238},"id":"6rr8GcZxdnD3","outputId":"05efb013-b6e7-4264-aa65-e5342c029c94","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:27.023895Z","iopub.execute_input":"2025-06-01T12:22:27.024199Z","iopub.status.idle":"2025-06-01T12:22:27.451615Z","shell.execute_reply.started":"2025-06-01T12:22:27.024174Z","shell.execute_reply":"2025-06-01T12:22:27.450615Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. OF ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"result = model.score(X_test, Y_test)\nprint(result)","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fhEkUQtamVzr","outputId":"1ed469d8-5d9d-4458-f37e-172b72ff3e9c","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:27.452547Z","iopub.execute_input":"2025-06-01T12:22:27.454765Z","iopub.status.idle":"2025-06-01T12:22:27.466679Z","shell.execute_reply.started":"2025-06-01T12:22:27.454734Z","shell.execute_reply":"2025-06-01T12:22:27.465903Z"}},"outputs":[{"name":"stdout","text":"0.7874015748031497\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"print(model.predict([[1,85,66,29,0,26.6,0.351,31]]))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c7f8myy8mcTR","outputId":"c1c12562-ce8b-480c-8fbe-5b03af6f89ee","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:27.469191Z","iopub.execute_input":"2025-06-01T12:22:27.471468Z","iopub.status.idle":"2025-06-01T12:22:27.490723Z","shell.execute_reply.started":"2025-06-01T12:22:27.471434Z","shell.execute_reply":"2025-06-01T12:22:27.488925Z"}},"outputs":[{"name":"stdout","text":"[0.]\n","output_type":"stream"}],"execution_count":8},{"cell_type":"markdown","source":"## ***a. Saving Model File***","metadata":{}},{"cell_type":"code","source":"joblib.dump(model, '/kaggle/working/trained_model.pkl') #sav","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PFX5VHSInWqd","outputId":"f8cf4410-bd33-4b05-ae71-79f0149b2653","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:28.919736Z","iopub.execute_input":"2025-06-01T12:22:28.920134Z","iopub.status.idle":"2025-06-01T12:22:28.928864Z","shell.execute_reply.started":"2025-06-01T12:22:28.920101Z","shell.execute_reply":"2025-06-01T12:22:28.927882Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"['/kaggle/working/trained_model.pkl']"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"\"\"\"\n#this is for Google Colab \n# save the model to disk\ndrive_path = '/content/drive/MyDrive/AtomCamp/Model/'\nfilename = 'our_model.sav'\njoblib.dump(model, drive_path + filename)\n\"\"\"","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oZnsi8XpdowO","outputId":"0cbe977e-360c-4f61-9426-062b232ec570","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:29.443801Z","iopub.execute_input":"2025-06-01T12:22:29.444116Z","iopub.status.idle":"2025-06-01T12:22:29.45017Z","shell.execute_reply.started":"2025-06-01T12:22:29.44409Z","shell.execute_reply":"2025-06-01T12:22:29.449301Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"\"\\n#this is for Google Colab \\n# save the model to disk\\ndrive_path = '/content/drive/MyDrive/AtomCamp/Model/'\\nfilename = 'our_model.sav'\\njoblib.dump(model, drive_path + filename)\\n\""},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"## ***b. Loading Model File***","metadata":{}},{"cell_type":"code","source":"loaded_model = joblib.load('/kaggle/working/trained_model.pkl')","metadata":{"id":"oa8UoGNZnWvl","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:34.394772Z","iopub.execute_input":"2025-06-01T12:22:34.395066Z","iopub.status.idle":"2025-06-01T12:22:34.40151Z","shell.execute_reply.started":"2025-06-01T12:22:34.395043Z","shell.execute_reply":"2025-06-01T12:22:34.400255Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"## ***c. Inference***","metadata":{}},{"cell_type":"code","source":"print(loaded_model.predict([[1,85,66,29,0,26.6,0.351,31]]))","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OJPBxN4CpDK9","outputId":"dd7472cb-9c52-4b23-86c3-37826f02d459","trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:22:40.686434Z","iopub.execute_input":"2025-06-01T12:22:40.686752Z","iopub.status.idle":"2025-06-01T12:22:40.692941Z","shell.execute_reply.started":"2025-06-01T12:22:40.686727Z","shell.execute_reply":"2025-06-01T12:22:40.692022Z"}},"outputs":[{"name":"stdout","text":"[0.]\n","output_type":"stream"}],"execution_count":12},{"cell_type":"markdown","source":"# ***4. Interface***","metadata":{}},{"cell_type":"markdown","source":"## ***a. Gradio interface Library***\n## ***b. Streamlit interface***","metadata":{}},{"cell_type":"code","source":"#!pip install gradio_client\n#!pip install gradio","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:23:48.880176Z","iopub.execute_input":"2025-06-01T12:23:48.880537Z","iopub.status.idle":"2025-06-01T12:23:48.885483Z","shell.execute_reply.started":"2025-06-01T12:23:48.880505Z","shell.execute_reply":"2025-06-01T12:23:48.884521Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"input_list = []\nfor i in range(8):\n  input_list.append(int(input(\"Please enter value: \")))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:23:50.089922Z","iopub.execute_input":"2025-06-01T12:23:50.090286Z","iopub.status.idle":"2025-06-01T12:24:00.171207Z","shell.execute_reply.started":"2025-06-01T12:23:50.09026Z","shell.execute_reply":"2025-06-01T12:24:00.170261Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"Please enter value:  45\nPlease enter value:  12\nPlease enter value:  78\nPlease enter value:  12\nPlease enter value:  46\nPlease enter value:  13\nPlease enter value:  46\nPlease enter value:  4\n"}],"execution_count":21},{"cell_type":"code","source":"input_list","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:24:02.93678Z","iopub.execute_input":"2025-06-01T12:24:02.937085Z","iopub.status.idle":"2025-06-01T12:24:02.943983Z","shell.execute_reply.started":"2025-06-01T12:24:02.937064Z","shell.execute_reply":"2025-06-01T12:24:02.942672Z"}},"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"[45, 12, 78, 12, 46, 13, 46, 4]"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"print(model.predict([input_list]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:23:13.78189Z","iopub.execute_input":"2025-06-01T12:23:13.78221Z","iopub.status.idle":"2025-06-01T12:23:13.787682Z","shell.execute_reply.started":"2025-06-01T12:23:13.782185Z","shell.execute_reply":"2025-06-01T12:23:13.786635Z"}},"outputs":[{"name":"stdout","text":"[1.]\n","output_type":"stream"}],"execution_count":17},{"cell_type":"markdown","source":"## ***Experimentation with Gradio interface***","metadata":{}},{"cell_type":"code","source":"import gradio as gr\n\ndef apnafun(number):\n  number = int(number)\n  tabel = []\n  for i in range(1,11):\n    tabel.append(number*i)\n\n  return str(tabel)\n\ndemo = gr.Interface(fn=apnafun, inputs=\"textbox\", outputs=\"textbox\")\n\nif __name__ == \"__main__\":\n    demo.launch(debug=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:24:07.120023Z","iopub.execute_input":"2025-06-01T12:24:07.120342Z","iopub.status.idle":"2025-06-01T12:24:46.661457Z","shell.execute_reply.started":"2025-06-01T12:24:07.12032Z","shell.execute_reply":"2025-06-01T12:24:46.660567Z"}},"outputs":[{"name":"stdout","text":"* Running on local URL:  http://127.0.0.1:7860\nIt looks like you are running Gradio on a hosted a Jupyter notebook. For the Gradio app to work, sharing must be enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n\n* Running on public URL: https://d2fc037f512c4b1273.gradio.live\n\nThis share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<div><iframe src=\"https://d2fc037f512c4b1273.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"},"metadata":{}},{"name":"stdout","text":"Keyboard interruption in main thread... closing server.\nKilling tunnel 127.0.0.1:7860 <> https://d2fc037f512c4b1273.gradio.live\n","output_type":"stream"}],"execution_count":23},{"cell_type":"markdown","source":"## ***userinterface for diabetic and non diabetic patients***","metadata":{}},{"cell_type":"code","source":"import gradio as gr\n# ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\nimport joblib\nloaded_model = joblib.load('/kaggle/working/trained_model.pkl')\n\ndef predict(preg, plas, pres, skin, test, mass, pedi, age):\n    result = loaded_model.predict([[int(preg), int(plas), int(pres), int(skin), int(test), int(mass), int(pedi), int(age)]])\n    if int(result[0]) == 1:\n        return \"The person is diabetic\"\n    else:\n        return \"The person is not diabetic\"\n    #return str(result)\n\ndemo = gr.Interface(\n    fn=predict,\n    inputs=[\"text\", \"text\", \"text\", \"text\", \"text\", \"text\", \"text\", \"text\"],\n    outputs=[\"text\"],\n)\n\ndemo.launch(debug=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-31T08:18:58.452594Z","iopub.execute_input":"2025-05-31T08:18:58.45324Z","iopub.status.idle":"2025-05-31T08:22:29.20175Z","shell.execute_reply.started":"2025-05-31T08:18:58.453213Z","shell.execute_reply":"2025-05-31T08:22:29.201049Z"}},"outputs":[{"name":"stdout","text":"* Running on local URL:  http://127.0.0.1:7861\nIt looks like you are running Gradio on a hosted a Jupyter notebook. For the Gradio app to work, sharing must be enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n\n* Running on public URL: https://aaff6d28f3d13d2ccd.gradio.live\n\nThis share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<div><iframe src=\"https://aaff6d28f3d13d2ccd.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"},"metadata":{}},{"name":"stdout","text":"Keyboard interruption in main thread... closing server.\nKilling tunnel 127.0.0.1:7861 <> https://aaff6d28f3d13d2ccd.gradio.live\n","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":""},"metadata":{}}],"execution_count":19},{"cell_type":"markdown","source":"## ***Testing Gradio App as an API***","metadata":{}},{"cell_type":"markdown","source":"## ***Using Hugging Face-Model deployment-API***","metadata":{}},{"cell_type":"code","source":"from gradio_client import Client\n\n#client = Client(\"https://aaff6d28f3d13d2ccd.gradio.live\")\nclient = Client(\"https://asifkhan9795-gradio-ui-model-deployment.hf.space\")\nresult = client.predict(\n\t\tpreg=\"2\", # you should enter integers only\n\t\tplas=\"2\",\n\t\tpres=\"2\",\n\t\tskin=\"2\",\n\t\ttest=\"2\",\n\t\tmass=\"2\", # one ya zero\n\t\tpedi=\"2\",\n\t\tage=\"2\",\n\t\tapi_name=\"/predict\"\n)\nprint(result)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-01T12:26:14.459134Z","iopub.execute_input":"2025-06-01T12:26:14.460009Z","iopub.status.idle":"2025-06-01T12:26:16.028385Z","shell.execute_reply.started":"2025-06-01T12:26:14.459979Z","shell.execute_reply":"2025-06-01T12:26:16.027061Z"}},"outputs":[{"name":"stdout","text":"Loaded as API: https://asifkhan9795-gradio-ui-model-deployment.hf.space/ ✔\nThe person is not diabetic\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}